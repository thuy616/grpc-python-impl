# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: movie_service.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='movie_service.proto',
  package='movieservice',
  syntax='proto3',
  serialized_pb=_b('\n\x13movie_service.proto\x12\x0cmovieservice\x1a\x1bgoogle/protobuf/empty.proto\"%\n\x16MoviesInTheaterRequest\x12\x0b\n\x03ids\x18\x01 \x03(\x04\">\n\x17MoviesInTheaterResponse\x12#\n\x06movies\x18\x01 \x03(\x0b\x32\x13.movieservice.Movie\"\x1a\n\x0cMovieRequest\x12\n\n\x02id\x18\x01 \x01(\x04\"4\n\rMovieDatabase\x12#\n\x06movies\x18\x01 \x03(\x0b\x32\x13.movieservice.Movie\"\xbd\x07\n\x05Movie\x12\r\n\x05\x61\x64ult\x18\x01 \x01(\x08\x12\x15\n\rbackdrop_path\x18\x02 \x01(\t\x12=\n\x15\x62\x65longs_to_collection\x18\x03 \x01(\x0b\x32\x1e.movieservice.Movie.Collection\x12\x0e\n\x06\x62udget\x18\x04 \x01(\x04\x12)\n\x06genres\x18\x05 \x03(\x0b\x32\x19.movieservice.Movie.Genre\x12\x10\n\x08homepage\x18\x06 \x01(\t\x12\n\n\x02id\x18\x07 \x01(\x04\x12\x0f\n\x07imdb_id\x18\x08 \x01(\t\x12\x19\n\x11original_language\x18\t \x01(\t\x12\x16\n\x0eoriginal_title\x18\n \x01(\t\x12\x10\n\x08overview\x18\x0b \x01(\t\x12\x12\n\npopularity\x18\x0c \x01(\x01\x12\x13\n\x0bposter_path\x18\r \x01(\t\x12\x43\n\x14production_companies\x18\x0e \x03(\x0b\x32%.movieservice.Movie.ProductionCompany\x12\x43\n\x14production_countries\x18\x0f \x03(\x0b\x32%.movieservice.Movie.ProductionCountry\x12\x14\n\x0crelease_date\x18\x10 \x01(\t\x12\x0f\n\x07revenue\x18\x11 \x01(\x04\x12\x0f\n\x07runtime\x18\x12 \x01(\x05\x12<\n\x10spoken_languages\x18\x13 \x03(\x0b\x32\".movieservice.Movie.SpokenLanguage\x12\x0e\n\x06status\x18\x14 \x01(\t\x12\x0f\n\x07tagline\x18\x15 \x01(\t\x12\r\n\x05title\x18\x16 \x01(\t\x12\r\n\x05video\x18\x17 \x01(\x08\x12\x14\n\x0cvote_average\x18\x18 \x01(\x01\x12\x12\n\nvote_count\x18\x19 \x01(\x05\x1aR\n\nCollection\x12\n\n\x02id\x18\x01 \x01(\x04\x12\x0c\n\x04name\x18\x02 \x01(\t\x12\x13\n\x0bposter_path\x18\x03 \x01(\t\x12\x15\n\rbackdrop_path\x18\x04 \x01(\t\x1a!\n\x05Genre\x12\n\n\x02id\x18\x01 \x01(\x05\x12\x0c\n\x04name\x18\x02 \x01(\t\x1a-\n\x11ProductionCompany\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\n\n\x02id\x18\x02 \x01(\x05\x1a\x35\n\x11ProductionCountry\x12\x12\n\niso_3166_1\x18\x01 \x01(\t\x12\x0c\n\x04name\x18\x02 \x01(\t\x1a\x31\n\x0eSpokenLanguage\x12\x11\n\tiso_639_1\x18\x01 \x01(\t\x12\x0c\n\x04name\x18\x02 \x01(\t2\xa2\x04\n\x0cMovieService\x12\x44\n\x0fGetMovieDetails\x12\x1a.movieservice.MovieRequest\x1a\x13.movieservice.Movie\"\x00\x12P\n\rListAllMovies\x12\x16.google.protobuf.Empty\x1a%.movieservice.MoviesInTheaterResponse\"\x00\x12O\n\x1cListAllMoviesServerStreaming\x12\x16.google.protobuf.Empty\x1a\x13.movieservice.Movie\"\x00\x30\x01\x12\x62\n!ListMoviesServerToClientStreaming\x12$.movieservice.MoviesInTheaterRequest\x1a\x13.movieservice.Movie\"\x00\x30\x01\x12j\n!ListMoviesClientToServerStreaming\x12\x1a.movieservice.MovieRequest\x1a%.movieservice.MoviesInTheaterResponse\"\x00(\x01\x12Y\n ListMoviesBidirectionalStreaming\x12\x1a.movieservice.MovieRequest\x1a\x13.movieservice.Movie\"\x00(\x01\x30\x01\x42\x39\n\x1dio.grpc.examples.movieserviceB\x11MovieServiceProtoP\x01\xa2\x02\x02MSb\x06proto3')
  ,
  dependencies=[google_dot_protobuf_dot_empty__pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_MOVIESINTHEATERREQUEST = _descriptor.Descriptor(
  name='MoviesInTheaterRequest',
  full_name='movieservice.MoviesInTheaterRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ids', full_name='movieservice.MoviesInTheaterRequest.ids', index=0,
      number=1, type=4, cpp_type=4, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=66,
  serialized_end=103,
)


_MOVIESINTHEATERRESPONSE = _descriptor.Descriptor(
  name='MoviesInTheaterResponse',
  full_name='movieservice.MoviesInTheaterResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='movies', full_name='movieservice.MoviesInTheaterResponse.movies', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=105,
  serialized_end=167,
)


_MOVIEREQUEST = _descriptor.Descriptor(
  name='MovieRequest',
  full_name='movieservice.MovieRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='movieservice.MovieRequest.id', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=169,
  serialized_end=195,
)


_MOVIEDATABASE = _descriptor.Descriptor(
  name='MovieDatabase',
  full_name='movieservice.MovieDatabase',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='movies', full_name='movieservice.MovieDatabase.movies', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=197,
  serialized_end=249,
)


_MOVIE_COLLECTION = _descriptor.Descriptor(
  name='Collection',
  full_name='movieservice.Movie.Collection',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='movieservice.Movie.Collection.id', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='name', full_name='movieservice.Movie.Collection.name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='poster_path', full_name='movieservice.Movie.Collection.poster_path', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='backdrop_path', full_name='movieservice.Movie.Collection.backdrop_path', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=939,
  serialized_end=1021,
)

_MOVIE_GENRE = _descriptor.Descriptor(
  name='Genre',
  full_name='movieservice.Movie.Genre',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='movieservice.Movie.Genre.id', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='name', full_name='movieservice.Movie.Genre.name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1023,
  serialized_end=1056,
)

_MOVIE_PRODUCTIONCOMPANY = _descriptor.Descriptor(
  name='ProductionCompany',
  full_name='movieservice.Movie.ProductionCompany',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='movieservice.Movie.ProductionCompany.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='id', full_name='movieservice.Movie.ProductionCompany.id', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1058,
  serialized_end=1103,
)

_MOVIE_PRODUCTIONCOUNTRY = _descriptor.Descriptor(
  name='ProductionCountry',
  full_name='movieservice.Movie.ProductionCountry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='iso_3166_1', full_name='movieservice.Movie.ProductionCountry.iso_3166_1', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='name', full_name='movieservice.Movie.ProductionCountry.name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1105,
  serialized_end=1158,
)

_MOVIE_SPOKENLANGUAGE = _descriptor.Descriptor(
  name='SpokenLanguage',
  full_name='movieservice.Movie.SpokenLanguage',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='iso_639_1', full_name='movieservice.Movie.SpokenLanguage.iso_639_1', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='name', full_name='movieservice.Movie.SpokenLanguage.name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1160,
  serialized_end=1209,
)

_MOVIE = _descriptor.Descriptor(
  name='Movie',
  full_name='movieservice.Movie',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='adult', full_name='movieservice.Movie.adult', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='backdrop_path', full_name='movieservice.Movie.backdrop_path', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='belongs_to_collection', full_name='movieservice.Movie.belongs_to_collection', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='budget', full_name='movieservice.Movie.budget', index=3,
      number=4, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='genres', full_name='movieservice.Movie.genres', index=4,
      number=5, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='homepage', full_name='movieservice.Movie.homepage', index=5,
      number=6, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='id', full_name='movieservice.Movie.id', index=6,
      number=7, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='imdb_id', full_name='movieservice.Movie.imdb_id', index=7,
      number=8, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='original_language', full_name='movieservice.Movie.original_language', index=8,
      number=9, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='original_title', full_name='movieservice.Movie.original_title', index=9,
      number=10, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='overview', full_name='movieservice.Movie.overview', index=10,
      number=11, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='popularity', full_name='movieservice.Movie.popularity', index=11,
      number=12, type=1, cpp_type=5, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='poster_path', full_name='movieservice.Movie.poster_path', index=12,
      number=13, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='production_companies', full_name='movieservice.Movie.production_companies', index=13,
      number=14, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='production_countries', full_name='movieservice.Movie.production_countries', index=14,
      number=15, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='release_date', full_name='movieservice.Movie.release_date', index=15,
      number=16, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='revenue', full_name='movieservice.Movie.revenue', index=16,
      number=17, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='runtime', full_name='movieservice.Movie.runtime', index=17,
      number=18, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='spoken_languages', full_name='movieservice.Movie.spoken_languages', index=18,
      number=19, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='status', full_name='movieservice.Movie.status', index=19,
      number=20, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='tagline', full_name='movieservice.Movie.tagline', index=20,
      number=21, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='title', full_name='movieservice.Movie.title', index=21,
      number=22, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='video', full_name='movieservice.Movie.video', index=22,
      number=23, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='vote_average', full_name='movieservice.Movie.vote_average', index=23,
      number=24, type=1, cpp_type=5, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='vote_count', full_name='movieservice.Movie.vote_count', index=24,
      number=25, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_MOVIE_COLLECTION, _MOVIE_GENRE, _MOVIE_PRODUCTIONCOMPANY, _MOVIE_PRODUCTIONCOUNTRY, _MOVIE_SPOKENLANGUAGE, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=252,
  serialized_end=1209,
)

_MOVIESINTHEATERRESPONSE.fields_by_name['movies'].message_type = _MOVIE
_MOVIEDATABASE.fields_by_name['movies'].message_type = _MOVIE
_MOVIE_COLLECTION.containing_type = _MOVIE
_MOVIE_GENRE.containing_type = _MOVIE
_MOVIE_PRODUCTIONCOMPANY.containing_type = _MOVIE
_MOVIE_PRODUCTIONCOUNTRY.containing_type = _MOVIE
_MOVIE_SPOKENLANGUAGE.containing_type = _MOVIE
_MOVIE.fields_by_name['belongs_to_collection'].message_type = _MOVIE_COLLECTION
_MOVIE.fields_by_name['genres'].message_type = _MOVIE_GENRE
_MOVIE.fields_by_name['production_companies'].message_type = _MOVIE_PRODUCTIONCOMPANY
_MOVIE.fields_by_name['production_countries'].message_type = _MOVIE_PRODUCTIONCOUNTRY
_MOVIE.fields_by_name['spoken_languages'].message_type = _MOVIE_SPOKENLANGUAGE
DESCRIPTOR.message_types_by_name['MoviesInTheaterRequest'] = _MOVIESINTHEATERREQUEST
DESCRIPTOR.message_types_by_name['MoviesInTheaterResponse'] = _MOVIESINTHEATERRESPONSE
DESCRIPTOR.message_types_by_name['MovieRequest'] = _MOVIEREQUEST
DESCRIPTOR.message_types_by_name['MovieDatabase'] = _MOVIEDATABASE
DESCRIPTOR.message_types_by_name['Movie'] = _MOVIE

MoviesInTheaterRequest = _reflection.GeneratedProtocolMessageType('MoviesInTheaterRequest', (_message.Message,), dict(
  DESCRIPTOR = _MOVIESINTHEATERREQUEST,
  __module__ = 'movie_service_pb2'
  # @@protoc_insertion_point(class_scope:movieservice.MoviesInTheaterRequest)
  ))
_sym_db.RegisterMessage(MoviesInTheaterRequest)

MoviesInTheaterResponse = _reflection.GeneratedProtocolMessageType('MoviesInTheaterResponse', (_message.Message,), dict(
  DESCRIPTOR = _MOVIESINTHEATERRESPONSE,
  __module__ = 'movie_service_pb2'
  # @@protoc_insertion_point(class_scope:movieservice.MoviesInTheaterResponse)
  ))
_sym_db.RegisterMessage(MoviesInTheaterResponse)

MovieRequest = _reflection.GeneratedProtocolMessageType('MovieRequest', (_message.Message,), dict(
  DESCRIPTOR = _MOVIEREQUEST,
  __module__ = 'movie_service_pb2'
  # @@protoc_insertion_point(class_scope:movieservice.MovieRequest)
  ))
_sym_db.RegisterMessage(MovieRequest)

MovieDatabase = _reflection.GeneratedProtocolMessageType('MovieDatabase', (_message.Message,), dict(
  DESCRIPTOR = _MOVIEDATABASE,
  __module__ = 'movie_service_pb2'
  # @@protoc_insertion_point(class_scope:movieservice.MovieDatabase)
  ))
_sym_db.RegisterMessage(MovieDatabase)

Movie = _reflection.GeneratedProtocolMessageType('Movie', (_message.Message,), dict(

  Collection = _reflection.GeneratedProtocolMessageType('Collection', (_message.Message,), dict(
    DESCRIPTOR = _MOVIE_COLLECTION,
    __module__ = 'movie_service_pb2'
    # @@protoc_insertion_point(class_scope:movieservice.Movie.Collection)
    ))
  ,

  Genre = _reflection.GeneratedProtocolMessageType('Genre', (_message.Message,), dict(
    DESCRIPTOR = _MOVIE_GENRE,
    __module__ = 'movie_service_pb2'
    # @@protoc_insertion_point(class_scope:movieservice.Movie.Genre)
    ))
  ,

  ProductionCompany = _reflection.GeneratedProtocolMessageType('ProductionCompany', (_message.Message,), dict(
    DESCRIPTOR = _MOVIE_PRODUCTIONCOMPANY,
    __module__ = 'movie_service_pb2'
    # @@protoc_insertion_point(class_scope:movieservice.Movie.ProductionCompany)
    ))
  ,

  ProductionCountry = _reflection.GeneratedProtocolMessageType('ProductionCountry', (_message.Message,), dict(
    DESCRIPTOR = _MOVIE_PRODUCTIONCOUNTRY,
    __module__ = 'movie_service_pb2'
    # @@protoc_insertion_point(class_scope:movieservice.Movie.ProductionCountry)
    ))
  ,

  SpokenLanguage = _reflection.GeneratedProtocolMessageType('SpokenLanguage', (_message.Message,), dict(
    DESCRIPTOR = _MOVIE_SPOKENLANGUAGE,
    __module__ = 'movie_service_pb2'
    # @@protoc_insertion_point(class_scope:movieservice.Movie.SpokenLanguage)
    ))
  ,
  DESCRIPTOR = _MOVIE,
  __module__ = 'movie_service_pb2'
  # @@protoc_insertion_point(class_scope:movieservice.Movie)
  ))
_sym_db.RegisterMessage(Movie)
_sym_db.RegisterMessage(Movie.Collection)
_sym_db.RegisterMessage(Movie.Genre)
_sym_db.RegisterMessage(Movie.ProductionCompany)
_sym_db.RegisterMessage(Movie.ProductionCountry)
_sym_db.RegisterMessage(Movie.SpokenLanguage)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\035io.grpc.examples.movieserviceB\021MovieServiceProtoP\001\242\002\002MS'))
import abc
from grpc.beta import implementations as beta_implementations
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities

class BetaMovieServiceServicer(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def GetMovieDetails(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def ListAllMovies(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def ListAllMoviesServerStreaming(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def ListMoviesServerToClientStreaming(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def ListMoviesClientToServerStreaming(self, request_iterator, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def ListMoviesBidirectionalStreaming(self, request_iterator, context):
    raise NotImplementedError()

class BetaMovieServiceStub(object):
  """The interface to which stubs will conform."""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def GetMovieDetails(self, request, timeout):
    raise NotImplementedError()
  GetMovieDetails.future = None
  @abc.abstractmethod
  def ListAllMovies(self, request, timeout):
    raise NotImplementedError()
  ListAllMovies.future = None
  @abc.abstractmethod
  def ListAllMoviesServerStreaming(self, request, timeout):
    raise NotImplementedError()
  @abc.abstractmethod
  def ListMoviesServerToClientStreaming(self, request, timeout):
    raise NotImplementedError()
  @abc.abstractmethod
  def ListMoviesClientToServerStreaming(self, request_iterator, timeout):
    raise NotImplementedError()
  ListMoviesClientToServerStreaming.future = None
  @abc.abstractmethod
  def ListMoviesBidirectionalStreaming(self, request_iterator, timeout):
    raise NotImplementedError()

def beta_create_MovieService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  import movie_service_pb2
  import movie_service_pb2
  import google.protobuf.empty_pb2
  import movie_service_pb2
  import google.protobuf.empty_pb2
  import movie_service_pb2
  import movie_service_pb2
  import movie_service_pb2
  import movie_service_pb2
  import movie_service_pb2
  import movie_service_pb2
  import movie_service_pb2
  request_deserializers = {
    ('movieservice.MovieService', 'GetMovieDetails'): movie_service_pb2.MovieRequest.FromString,
    ('movieservice.MovieService', 'ListAllMovies'): google.protobuf.empty_pb2.Empty.FromString,
    ('movieservice.MovieService', 'ListAllMoviesServerStreaming'): google.protobuf.empty_pb2.Empty.FromString,
    ('movieservice.MovieService', 'ListMoviesBidirectionalStreaming'): movie_service_pb2.MovieRequest.FromString,
    ('movieservice.MovieService', 'ListMoviesClientToServerStreaming'): movie_service_pb2.MovieRequest.FromString,
    ('movieservice.MovieService', 'ListMoviesServerToClientStreaming'): movie_service_pb2.MoviesInTheaterRequest.FromString,
  }
  response_serializers = {
    ('movieservice.MovieService', 'GetMovieDetails'): movie_service_pb2.Movie.SerializeToString,
    ('movieservice.MovieService', 'ListAllMovies'): movie_service_pb2.MoviesInTheaterResponse.SerializeToString,
    ('movieservice.MovieService', 'ListAllMoviesServerStreaming'): movie_service_pb2.Movie.SerializeToString,
    ('movieservice.MovieService', 'ListMoviesBidirectionalStreaming'): movie_service_pb2.Movie.SerializeToString,
    ('movieservice.MovieService', 'ListMoviesClientToServerStreaming'): movie_service_pb2.MoviesInTheaterResponse.SerializeToString,
    ('movieservice.MovieService', 'ListMoviesServerToClientStreaming'): movie_service_pb2.Movie.SerializeToString,
  }
  method_implementations = {
    ('movieservice.MovieService', 'GetMovieDetails'): face_utilities.unary_unary_inline(servicer.GetMovieDetails),
    ('movieservice.MovieService', 'ListAllMovies'): face_utilities.unary_unary_inline(servicer.ListAllMovies),
    ('movieservice.MovieService', 'ListAllMoviesServerStreaming'): face_utilities.unary_stream_inline(servicer.ListAllMoviesServerStreaming),
    ('movieservice.MovieService', 'ListMoviesBidirectionalStreaming'): face_utilities.stream_stream_inline(servicer.ListMoviesBidirectionalStreaming),
    ('movieservice.MovieService', 'ListMoviesClientToServerStreaming'): face_utilities.stream_unary_inline(servicer.ListMoviesClientToServerStreaming),
    ('movieservice.MovieService', 'ListMoviesServerToClientStreaming'): face_utilities.unary_stream_inline(servicer.ListMoviesServerToClientStreaming),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)

def beta_create_MovieService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  import movie_service_pb2
  import movie_service_pb2
  import google.protobuf.empty_pb2
  import movie_service_pb2
  import google.protobuf.empty_pb2
  import movie_service_pb2
  import movie_service_pb2
  import movie_service_pb2
  import movie_service_pb2
  import movie_service_pb2
  import movie_service_pb2
  import movie_service_pb2
  request_serializers = {
    ('movieservice.MovieService', 'GetMovieDetails'): movie_service_pb2.MovieRequest.SerializeToString,
    ('movieservice.MovieService', 'ListAllMovies'): google.protobuf.empty_pb2.Empty.SerializeToString,
    ('movieservice.MovieService', 'ListAllMoviesServerStreaming'): google.protobuf.empty_pb2.Empty.SerializeToString,
    ('movieservice.MovieService', 'ListMoviesBidirectionalStreaming'): movie_service_pb2.MovieRequest.SerializeToString,
    ('movieservice.MovieService', 'ListMoviesClientToServerStreaming'): movie_service_pb2.MovieRequest.SerializeToString,
    ('movieservice.MovieService', 'ListMoviesServerToClientStreaming'): movie_service_pb2.MoviesInTheaterRequest.SerializeToString,
  }
  response_deserializers = {
    ('movieservice.MovieService', 'GetMovieDetails'): movie_service_pb2.Movie.FromString,
    ('movieservice.MovieService', 'ListAllMovies'): movie_service_pb2.MoviesInTheaterResponse.FromString,
    ('movieservice.MovieService', 'ListAllMoviesServerStreaming'): movie_service_pb2.Movie.FromString,
    ('movieservice.MovieService', 'ListMoviesBidirectionalStreaming'): movie_service_pb2.Movie.FromString,
    ('movieservice.MovieService', 'ListMoviesClientToServerStreaming'): movie_service_pb2.MoviesInTheaterResponse.FromString,
    ('movieservice.MovieService', 'ListMoviesServerToClientStreaming'): movie_service_pb2.Movie.FromString,
  }
  cardinalities = {
    'GetMovieDetails': cardinality.Cardinality.UNARY_UNARY,
    'ListAllMovies': cardinality.Cardinality.UNARY_UNARY,
    'ListAllMoviesServerStreaming': cardinality.Cardinality.UNARY_STREAM,
    'ListMoviesBidirectionalStreaming': cardinality.Cardinality.STREAM_STREAM,
    'ListMoviesClientToServerStreaming': cardinality.Cardinality.STREAM_UNARY,
    'ListMoviesServerToClientStreaming': cardinality.Cardinality.UNARY_STREAM,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'movieservice.MovieService', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
